Definition of each class:

1. AmortizationSchedule:  The Driver class that contains main() function
2. AmortizationPlan: A class that stores input data tuple (amountBorrowed, apr, years)
3. AmortizationCalculator:  An abstract class that defines how the List of monthly payment is calculated, and how the raw output is generated.
4. AmortizationMonthlyResult:  A class that stores the raw data of output
5. AmortizationOutput: An abstract class that defines the style of the output.

How to run the program:
1. cd into "exercise" directory, and run:  
    $ javac *.java
2. cd .. up to the directory that contains the "exercise" folder, and run: 
    $ java exercise.AmortizationSchedule


Additional thinking about the design:
If we have several formula to calculate monthly payment and we also have some logic that describes when to use every formula, e.g. If now the date is in Apr-Jue, we use formula 1, else if the date is in July-Sept, we use formula 2.

In this case, we can have a class named CalculatorFactory, which has a static function getCalculator(). We write our logic above in this function, and returns a AmortizationCalculator object.

Therefore, in main() function, we can do: 
    AmortizationCalculator ac = CalculatorFactory.getCalculator();  
    List<AmortizationMonthlyResult> listamr = ac.calculate(amortizationPlan);
    ...

In this way, we don't need to manully change which calculator we want to use everytime.
